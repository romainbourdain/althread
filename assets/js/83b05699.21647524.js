"use strict";(self.webpackChunkalthread=self.webpackChunkalthread||[]).push([[149],{2400:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>o});var s=t(6070),i=t(5710);const r={sidebar_position:1},d="Introduction",a={id:"guide/intro",title:"Introduction",description:"Qu'est ce qu'Althread ?",source:"@site/docs/guide/intro.md",sourceDirName:"guide",slug:"/guide/intro",permalink:"/althread/docs/guide/intro",draft:!1,unlisted:!1,editUrl:"https://github.com/romainbourdain/althread/tree/main/docs/guide/intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"guideSidebar",next:{title:"Installation",permalink:"/althread/docs/guide/getting-started/installation"}},l={},o=[{value:"Qu&#39;est ce qu&#39;Althread ?",id:"quest-ce-qualthread-",level:2},{value:"Objectifs d&#39;Althread",id:"objectifs-dalthread",level:2},{value:"Principes fondamentaux",id:"principes-fondamentaux",level:2},{value:"Exemple de code",id:"exemple-de-code",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"introduction",children:"Introduction"})}),"\n",(0,s.jsx)(n.h2,{id:"quest-ce-qualthread-",children:"Qu'est ce qu'Althread ?"}),"\n",(0,s.jsxs)(n.p,{children:["Althread est un langage de programmation p\xe9dagogique con\xe7u pour mod\xe9liser et v\xe9rifier des syst\xe8mes concurrents et distribu\xe9s. Inspir\xe9 du langage ",(0,s.jsx)(n.a,{href:"https://fr.wikipedia.org/wiki/PROMELA",children:"PROMELA"}),", Althread offre une syntaxe simplifi\xe9e tout en pr\xe9servant des fonctionnalit\xe9s essentielles \xe0 la v\xe9rification de syst\xe8mes distribu\xe9s comme la mod\xe9lisation de processus parall\xe8les, de communications entre ces processus et de comportements non d\xe9terministes."]}),"\n",(0,s.jsx)(n.p,{children:"Ce langage est particuli\xe8rement adapt\xe9 \xe0 l'enseignement des bases de la programmation concurrente et \xe0 la v\xe9rification formelle, permettant aux \xe9tudiants et aux d\xe9veloppeurs d\xe9butants de se familiariser avec ces concepts complexes dans un environnement accessible."}),"\n",(0,s.jsx)(n.h2,{id:"objectifs-dalthread",children:"Objectifs d'Althread"}),"\n",(0,s.jsx)(n.p,{children:"Le d\xe9veloppement d'althread est motiv\xe9 par les objectifs suivants :"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Facilit\xe9 d'apprentissage"})," : Althread est con\xe7u pour \xeatre simple \xe0 apprendre et \xe0 utiliser, m\xeame pour des d\xe9butants en programmation. Sa syntaxe, inspir\xe9e du C, permet de le prendre en main rapidement et de se concentrer sur les concepts plut\xf4t que sur la syntaxe."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Accessibilit\xe9"})," : Althread est un langage open-source et multiplateforme, permettant \xe0 chacun de l'utiliser gratuitement et de contribuer \xe0 son d\xe9veloppement."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"V\xe9rification de syst\xe8mes"})," : Althread permet de mod\xe9liser des syst\xe8mes concurrents et distribu\xe9s et de v\xe9rifier leur validit\xe9 en utilisant des conditions."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"D\xe9bogage"})," : Gr\xe2ce \xe0 un outil de d\xe9bogage int\xe9gr\xe9, les erreurs peuvent \xeatre rapidement identifi\xe9es puis corrig\xe9es, facilitant la correction de mod\xe8les complexes."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"principes-fondamentaux",children:"Principes fondamentaux"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Fonctionnalit\xe9"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Processus"}),(0,s.jsx)(n.td,{children:"Althread permet de cr\xe9er et d'ex\xe9cuter plusieurs processus en parall\xe8le de mani\xe8re non d\xe9terministe."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Communications"}),(0,s.jsx)(n.td,{children:"Les processus communiquent \xe0 travers des variables partag\xe9es ainsi que des canaux, permettant la synchronisation et l'\xe9change d'informations."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"V\xe9rification"}),(0,s.jsx)(n.td,{children:"Des conditions simples peuvent \xeatre d\xe9finies pour v\xe9rifier la validit\xe9 d'un syst\xe8me."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"D\xe9bogage"}),(0,s.jsx)(n.td,{children:"L'outil de d\xe9bogage int\xe9gr\xe9 aide \xe0 analyser les comportements inattendus et \xe0 identifier les erreurs de conception."})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"exemple-de-code",children:"Exemple de code"}),"\n",(0,s.jsx)(n.p,{children:"Voici la mod\xe9lisation de l'exclusion mutuelle de Dekker en Althread :"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"shared {\n    const A_TURN = false;\n    const B_TURN = true;\n    let x: bool;\n    let y: bool;\n    let t: bool;\n    let nbSC: int;\n}\n\nprocess A() {\n    x = true;\n    t = B_TURN;\n    wait(y == false || t == A_TURN);\n    nbSC++;\n    nbSC--;\n    x = false;\n}\n\nprocess B() {\n    y = true;\n    t = A_TURN;\n    wait(x == false || t == B_TURN);\n    nbSC++;\n    nbSC--;\n    y = false;\n}\n\nalways {\n    nbSC == 0 || nbSC == 1;\n}\n\nmain {\n    atomic {\n        run A();\n        run B();\n    }\n}\n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},5710:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>a});var s=t(758);const i={},r=s.createContext(i);function d(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);