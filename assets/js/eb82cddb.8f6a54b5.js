"use strict";(self.webpackChunkalthread=self.webpackChunkalthread||[]).push([[731],{7403:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>d,toc:()=>a});var r=s(6070),t=s(5710);const i={sidebar_position:3},l="Syntaxe d'Althread",d={id:"guide/getting-started/syntaxe",title:"Syntaxe d'Althread",description:"La syntaxe d'althread est faite pour \xeatre la plus intuitive possible. Elle est inspir\xe9e du langage C, ce qui permet de la prendre en main rapidement et de se concentrer sur les concepts plut\xf4t que sur la syntaxe.",source:"@site/docs/guide/getting-started/syntaxe.md",sourceDirName:"guide/getting-started",slug:"/guide/getting-started/syntaxe",permalink:"/althread/docs/guide/getting-started/syntaxe",draft:!1,unlisted:!1,editUrl:"https://github.com/romainbourdain/althread/tree/main/docs/guide/getting-started/syntaxe.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"guideSidebar",previous:{title:"Hello World",permalink:"/althread/docs/guide/getting-started/hello-world"},next:{title:"Utilisation des processus",permalink:"/althread/docs/guide/process/simple-process"}},c={},a=[{value:"Commentaires",id:"commentaires",level:2},{value:"Structure d&#39;un programme",id:"structure-dun-programme",level:2},{value:"Type de donn\xe9es",id:"type-de-donn\xe9es",level:2},{value:"Typage statique",id:"typage-statique",level:3},{value:"Typage implicite",id:"typage-implicite",level:3},{value:"Expression atomique",id:"expression-atomique",level:2},{value:"Structures de contr\xf4le et port\xe9e des variables",id:"structures-de-contr\xf4le-et-port\xe9e-des-variables",level:2}];function o(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"syntaxe-dalthread",children:"Syntaxe d'Althread"})}),"\n",(0,r.jsx)(n.p,{children:"La syntaxe d'althread est faite pour \xeatre la plus intuitive possible. Elle est inspir\xe9e du langage C, ce qui permet de la prendre en main rapidement et de se concentrer sur les concepts plut\xf4t que sur la syntaxe."}),"\n",(0,r.jsx)(n.h2,{id:"commentaires",children:"Commentaires"}),"\n",(0,r.jsx)(n.p,{children:"Il existe deux types de commentaires en althread :"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Commentaire sur une ligne"})," : ",(0,r.jsx)(n.code,{children:"// Ceci est un commentaire sur une ligne"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Commentaire sur plusieurs lignes"})," : ",(0,r.jsx)(n.code,{children:"/* Ceci est un commentaire sur plusieurs lignes */"})]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"structure-dun-programme",children:"Structure d'un programme"}),"\n",(0,r.jsx)(n.p,{children:"Un programme est structur\xe9 en plusieurs blocks, qui peuvent correspondre \xe0 3 types d'\xe9l\xe9ments :"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"D\xe9claration de variables globales"})," : ",(0,r.jsx)(n.code,{children:"shared { ... }"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"V\xe9rification de conditions"})," : ",(0,r.jsx)(n.code,{children:"always { ... }"})," ou ",(0,r.jsx)(n.code,{children:"never { ... }"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"D\xe9finition de processus"})," : ",(0,r.jsx)(n.code,{children:"process A() { ... }"})," ou ",(0,r.jsx)(n.code,{children:"main { ... }"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Le block main est le processus principal. Il est ex\xe9cut\xe9 en premier et sert de point d'entr\xe9e au programme."}),"\n",(0,r.jsx)(n.h2,{id:"type-de-donn\xe9es",children:"Type de donn\xe9es"}),"\n",(0,r.jsx)(n.p,{children:"Les variables en althread peuvent prendre les types suivants :"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Vide"})," : ",(0,r.jsx)(n.code,{children:"void"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Bool\xe9en"})," : ",(0,r.jsx)(n.code,{children:"bool"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Entier"})," : ",(0,r.jsx)(n.code,{children:"int"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Flottant"})," : ",(0,r.jsx)(n.code,{children:"float"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Cha\xeene de caract\xe8res"})," : ",(0,r.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"typage-statique",children:"Typage statique"}),"\n",(0,r.jsx)(n.p,{children:"Althread utilise un typage statique ce qui signifie que le type d'une variable est d\xe9termin\xe9 lorsqu'elle est d\xe9clar\xe9e et ne peut pas \xeatre modifi\xe9 par la suite. Ainsi, le programme suivant provoquera une erreur :"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"let x: int = 5;\nx = 3.4; // Erreur : x est de type int et ne peut pas prendre de valeur de type float.\n"})}),"\n",(0,r.jsx)(n.h3,{id:"typage-implicite",children:"Typage implicite"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"let a: int = 5;   // x est de type int et prend la valeur 5.\nlet b: bool;      // x est de type bool et prend la valeur par d\xe9faut false.\nlet c = 3.4;      // x est de type float et prend la valeur 3.4.\nlet d;            // x est de type void et prend la valeur par d\xe9faut `null`.\n"})}),"\n",(0,r.jsx)(n.h2,{id:"expression-atomique",children:"Expression atomique"}),"\n",(0,r.jsx)(n.p,{children:"Une expression atomique est la plus petite unit\xe9 d'ex\xe9cution. En althread, il existe 6 types d'expressions atomiques :"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"D\xe9claration"})," : ",(0,r.jsx)(n.code,{children:"let x = 5;"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Affectation"})," : ",(0,r.jsx)(n.code,{children:"x = 5;"}),",  ",(0,r.jsx)(n.code,{children:"x++;"}),", ",(0,r.jsx)(n.code,{children:"x += 1"}),";"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Op\xe9ration arithm\xe9tique"})," : ",(0,r.jsx)(n.code,{children:"x + y;"}),", ",(0,r.jsx)(n.code,{children:"x - y;"}),", ",(0,r.jsx)(n.code,{children:"x * y;"}),", ",(0,r.jsx)(n.code,{children:"x / y;"}),", ",(0,r.jsx)(n.code,{children:"x % y;"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Scope atomique"}),": ",(0,r.jsx)(n.code,{children:"atomic { ... }"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Appel de fonction"})," : ",(0,r.jsx)(n.code,{children:'print("Hello world");'}),", ",(0,r.jsx)(n.code,{children:"wait(x == 5);"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Ex\xe9cution de processus"})," : ",(0,r.jsx)(n.code,{children:"run A();"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Les expressions atomiques ne peuvent pas \xeatre interrompues par un autre processus. Cela signifie que pendant qu'un processus ex\xe9cute une expression atomique, aucun autre processus ne peut prendre la main."}),"\n",(0,r.jsx)(n.h2,{id:"structures-de-contr\xf4le-et-port\xe9e-des-variables",children:"Structures de contr\xf4le et port\xe9e des variables"}),"\n",(0,r.jsx)(n.p,{children:"Althread propose plusieurs structures de contr\xf4le pour g\xe9rer le flux d'ex\xe9cution d'un programme :"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Condition"})," : ",(0,r.jsx)(n.code,{children:"if (condition) { ... } else { ... }"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Boucle"})," : ",(0,r.jsx)(n.code,{children:"while (condition) { ... }"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Scope"})," : ",(0,r.jsx)(n.code,{children:"{ ... }"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Les variables d\xe9clar\xe9es dans une structure de contr\xf4le sont visibles uniquement \xe0 l'int\xe9rieur de cette structure. Cela permet de limiter la port\xe9e des variables et d'\xe9viter les conflits de noms."}),"\n",(0,r.jsx)(n.p,{children:"Il est possible au sein d'une structure de contr\xf4le de d\xe9clarer une variable avec le m\xeame nom qu'une variable globale. Dans ce cas, la variable locale masque la variable globale."})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},5710:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>d});var r=s(758);const t={},i=r.createContext(t);function l(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);